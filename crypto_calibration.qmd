---
title: "Crypto Risk Calibration"
format: html
editor: visual
execute:
  echo: false
  message: false
  warning: false
---

![](crypto_calibration/images/ChatGPT%20Image%20May%2030,%202025,%2002_36_32%20PM.png){width="1000" height="400"}

Cryptocurrency first manifested into existence in 2008, when the first ever Bitcoin was mined. It has since grown, with thousands of variants now available to purchase by the armchair investor. Some financial institutions have also gotten in on the game, although the level of trading pales compared to other major asset classes.

By applying principles used by insurance companies in asset risk calibration, I have constructed a risk calibration for cryptocurrency risk. I am not aware of any insurers who would need such a calibration, but if they did, they might take inspiration from this article.

**Disclaimer**: This article is **NOT** an endorsement of cryptocurrency as an asset class.

```{r}
#| labels: initial setup
#| results: false

library(ggplot2)
library(tidyverse)
library(ggiraph)
library(patchwork)
library(fitdistrplus) # <- required for t.scaled/normal distribution
library(metRology) # <- required for t.scaled distribution
library(GeneralizedHyperbolic) # <- required for hyperb distribution
library(VarianceGamma) # <- required for vg distribution

data_folder <- "./crypto_calibration/Data"

source("./crypto_calibration/plot_open_over_time.R")
source("./crypto_calibration/plot_empirical_returns.R")
source("./crypto_calibration/distribution_functions.R")
source("./crypto_calibration/extract_fitting_statistics.R")
source("./crypto_calibration/create_tabset.R")


risk_premium <- 0.03

crypto_colours <- c("BTC" = "#f7931a", "ETH" = "#116797", "XRP" = "#2f2c56", "DGE" = "#987F50")
base_colour <- "#008CBA"
crypto_levels <- names(crypto_colours)
crypto_files <- paste0(data_folder, "/", crypto_levels, " Historical Data.csv")

date_ceiling <- as.Date("2025-05-01")
date_floor <- as.Date("2012-01-01")

# =================================================
# ============== Clean market data ================
# =================================================
market_data <-
  crypto_files |>
  map(\(x) read_csv(x, col_types = c(Date = "c", Open = "n", `Vol.` = "c"))) |>
  setNames(crypto_levels) |>
  map(\(x) dplyr::select(x, Date, Open, Vol.)) |>
  bind_rows(.id = "crypto") |>
  mutate(Date = as.Date(Date, tryFormats = c("%d/%m/%Y"))) |>
  janitor::clean_names() |>
  dplyr::mutate(crypto = factor(crypto, levels = crypto_levels)) |>
  dplyr::filter(date <= date_ceiling,
                date >= date_floor) |>
  arrange(crypto, date) |>
  mutate(simple_returns_raw = 
           dplyr::if_else(crypto == lag(crypto, 12), (open / lag(open, 12)) - 1, NA)
         ) |>
  mutate(simple_returns_neutral = 
           (1 + simple_returns_raw) * (1 + risk_premium) / 
           mean(1 + simple_returns_raw, na.rm = TRUE) - 1, 
         .by = crypto) |>
  mutate(log_returns = log(1 + simple_returns_neutral))

# =================================================
# ============== Fit distributions ================
# =================================================

distributions = c(
  "Normal" = "norm", 
  "Logistic" = "logis", 
  "Student T" = "t.scaled", 
  "Hyperbolic" = "hyperb", 
  "Variance-Gamma" = "vg"
  )

fitted_distributions <-
  market_data |>
  dplyr::summarise(
    data = list(log_returns |> na.omit()),
    .by = crypto
  ) |>
  tidyr::expand_grid(distribution = unname(distributions)) |>
  dplyr::mutate(
    model = purrr::map2(
      .x = distribution,
      .y = data,
      .f = function(x, y) fit_distribution(x, c(unlist(y)))
    )
  ) |>
  dplyr::mutate(
    data_percentiles = purrr::map(data, .f = extract_data_percentiles)
  ) |> 
  dplyr::mutate(
    fitted_quantiles = 
      dplyr::pick(distribution, model, data_percentiles) |> 
      dplyr::rename(percentiles = data_percentiles) |> 
      purrr::pmap(.f = extract_fit_quantiles)
  )

```

## The Premise

An insurance company has a non-trivial holding in the cryptocurrency markets. An internal model calibration for this risk exposure is required. By applying some of the principles used for other major asset classes, such as property and equity, I consider what that risk calibration might look like.

It is also expected that the insurance company would have a significant holding in UK equity markets, and that the insurer has a risk scenario generator. These assumptions are necessary when considering how our cryptocurrency risk might contribute to the final SCR of a company.

## Data

### Empirical Data

Index data was taken from a publicly available source: <https://www.investing.com/>. We have selected the data for value in GBP of the four of the largest cryptocurrencies by market capitalisation: Bitcoin (BTC), Ethereum (ETH), Ripple (XRP), and Dogecoin (DGE).

We have used data as far back as available, capped to 2012. This represents different start dates for different cryptocurrencies. We have:

-   Jan-12 for BTC (Bitcoin)

-   Feb-15 for XRP (Ripple)

-   Apr-16 for ETH (Ethereum)

-   Jul-17 for DGE (Dogecoin)

The data used is up until May-25, which was the latest available month at time of writing.

We performed an array of stationarity tests on the Bitcoin dataset. In all cases p-values were above 0.05, meaning we could not reject any of the null hypotheses. This was both in tests where the null hypothesis was the data contains a trend, and when the null hypothesis was the data is level.

The index data looks as follows:

```{r}
#| labels: crypto over time
#| echo: false

market_data |> plot_open_over_time()

```

### Transformation(s)

Index data is transformed to monthly annual overlapping investment returns. The benefit of this is the generation of extra data points. Given the limited history of cryptocurrency, this was an essential transformation. The downside to this approach would be any autocorrelation within our datasets.

We are completing our analysis on the excess-of-mean returns. To do this, we deducted the historical mean from our datasets, such that the mean of the simple returns is 0%. It should be noted that this was not a trivial amount for cryptocurrency.

In this analysis we have chosen to use log returns. This has the advantage of allowing returns to occupy a range between ±∞, unlike simple returns which can theoretically be below -100%. This is particularly useful for the incredibly volatile asset that is crypto-currency, where distribution fitting would likely extend beyond the -100% for non-trivial probabilities.

We then added in a risk premium to reflect the best estimate of expected returns for this asset class. When choosing a value it is worth considering what type of asset cryptocurrency is. If it is indeed a currency, then a risk premium of 0% would seem appropriate given currency is not a growth asset. However cryptocurrency appears to act more like a commodity that investors purchase in the hope that someone will pay more for it in the future. This is more akin to a bar of gold than a dollar.

Given the asset acts more like a commodity, we are assuming the expected return to be similar to expected inflation. At time of writing (May 2025) the inflation rate is high, however the Office for Budget Responsibility (OBR) has predicted from 2026 rates will be around 2%, with a range of around 0-5%. We have therefore set our risk premium to be 3%, closer to the current rate of inflation. \[<https://obr.uk/efo/economic-and-fiscal-outlook-march-2025>\]

It should be noted that when we combined these transformations, the mean of our datasets was very negative. For example the mean of log transformed BTC data, before adding any risk premium adjustments, was -81%. This is due to the extreme volatility found in cryptocurrency, as well as the large returns in general.

### Annualised Change

We present the empirical data for our 4 chosen cryptocurrencies in the plots below. Firstly we show the time series of the annual log returns, as well as histograms of their distributions.

```{r}
#| label: annual change plot
#| echo: false

market_data |>
  dplyr::filter(!is.na(log_returns)) |>
  plot_empirical_returns(crypto_colours)

```

Perhaps the most striking things from the data are:

-   The annualised log changes are enormous. For comparison a similar distribution for UK Equities would be very rare to see a point beyond the ±50% range.

-   The 4 different cryptocurrencies are highly correlated in their movements. They almost move in complete synchronicity.

-   The distributions have quite negative means. This is a consequence of our log transformations. This amount can often be trivial for standard assets, however as the variance of cryptocurrency returns is huge, the mean of log returns is a lot lower than 0%.

## Distribution Fitting

We tried to fit a range of distributions to each one of our data sets. The distributions attempted (with the number of parameters in parentheses) are:

-   Normal (2)

-   Logistic (2)

-   Student T (3)

-   Hyperbolic (4)

We show the QQ plots for these fitting attempts below. We decided not to show the Student T as it typically converged to the Normal distribution and did not offer much alternative in terms of distribution choice.

```{r}
#| label: QQ plot
#| echo: false
#| out-width: "100%"
#| fig-asp: 1

plot_data <- 
fitted_distributions |> 
  dplyr::select(-model) |> 
  dplyr::rename(data_quantiles = data) |> 
  tidyr::unnest(
    cols = c(data_quantiles, data_percentiles, fitted_quantiles)
  ) |> 
  dplyr::filter(distribution != "vg") |> 
  dplyr::mutate(
    distribution = names(distributions)[match(distribution, distributions)],
    distribution = factor(distribution, levels = names(distributions))
  )

plot_limits <- c(-6, 6)

plot_data |>
  ggplot() +
  aes(
    x = fitted_quantiles,
    y = data_quantiles,
    color = crypto
  ) +
  geom_abline(slope = 1, intercept = 0) +
  geom_point(shape = 1) +
  facet_grid(
    rows = vars(distribution),
    cols = vars(crypto)
  ) +
  scale_color_manual(values = crypto_colours) +
  scale_x_continuous(
    limits = plot_limits,
    name = "Fitted Quantiles",
    labels = scales::percent_format()
  ) +
  scale_y_continuous(
    limits = plot_limits,
    name = "Actual Quantiles",
    labels = scales::percent_format()
  ) +
  theme_bw() +
  theme(
    legend.position = "none",
    strip.background = element_rect(fill = base_colour),
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)
  ) 
  
```

From the QQ plot we can infer:

-   For BTC, ETH and XRP it seems like the Hyperbolic distribution fits the best. This is particularly true around the negative tail, which is the most important part of the distribution for our purposes.

-   For DGE the Hyperbolic also seems to fit better around the negative tail. It should be noted that the unusual history of Dogecoin was hard to fit any distribution to. This is perhaps not surprising for an asset that is influenced more by Elon Musk tweets than any other market force.

-   The Normal, Student T and Logistic distributions struggled around the tail. This is perhaps not surprising given all 3 are symmetrical distributions, and the actual historical returns are highly skewed.

Also helpful in determining the best fit are fitting statistics. We have calculated the following values:

-   *Residual Sum of Squares (RSS)* - this is the sum of least square values from our QQ plots. The lower the value, the better the fit.

-   *Maximum Likelihood Estimator (MLE)* - this is the likelihood of our empirical points upon our fitted distribution. The higher the value, the better the fit.

-   *Akaike Information Criterion (AIC)* - this is a fitting statistic based on the MLE. The lower the value, the better the fit.

-   *Bayes Information Criterion (BIC)* - similar to AIC, this statistic also penalises higher distributions with more parameters. The lower the value, the better the fit.

We present these in the tables below. To make deciphering easier, we have applied a colour scale over the table with redder values being poorer and whiter values being better fitting statistics:

::: {.panel-tabset style="color:grey;"}
```{r}
#| label: tables of fitting stats
#| echo: false  
#| results: asis
 
# code to be added
fitting_stats_df <-
fitted_distributions |> 
  dplyr::mutate(
    RSS = purrr::map2(
      data, 
      fitted_quantiles, 
      function(x, y) extract_rss(x, y)
      ) |> unlist(),
    LogLik = purrr::map(
      model, 
      function(x) extract_loglik(x)
      ) |> unlist(),
    AIC = purrr::map(
      model, 
      function(x) extract_aic(x)
      ) |> unlist(),
    BIC = purrr::map(
      model, 
      function(x) extract_bic(x)
      ) |> unlist()
  ) |> 
  dplyr::select(
    crypto, distribution, RSS, LogLik, AIC, BIC
  ) |> 
  dplyr::filter(distribution != "vg") |> 
  dplyr::mutate(
    distribution = names(distributions)[match(distribution, distributions)],
    distribution = factor(distribution, levels = names(distributions))
  ) |> 
  dplyr::rename(Distribution = distribution)


gt_theme <- function(gt, base_colour = "#008CBA") {
  
  gt |> 
      gt::cols_align(columns = dplyr::where(is.numeric), align = "center") |> 
  gt::tab_options(
        column_labels.background.color =  base_colour,
        quarto.disable_processing = TRUE
        ) |>
  gt::opt_vertical_padding(scale = 0.8)
}


format_fitting_stats_df <- function(df) {
  df |> 
  gt::gt() |> 
  gt::fmt_number(columns = "RSS", decimals = 3) |> 
  gt::fmt_number(columns = c("LogLik", "AIC", "BIC"), decimals = 1) |> 
  gt::data_color(
    columns = dplyr::where(is.numeric),
    colors = function(x) {
      abs_x <- abs(x)
      scales::col_numeric(
        palette = c("white", "salmon1"),
        domain = range(abs_x, na.rm = TRUE)
      )(abs_x)
    },
    apply_to = "fill",
    autocolor_text = TRUE
  ) |> 
  gt::cols_width(dplyr::where(is.numeric) ~ gt::px(90),
                 "Distribution" ~ gt::px(160)) |> 
    gt_theme()

}

fitting_stats_list <-
fitting_stats_df |> 
  dplyr::arrange(crypto) |> 
  dplyr::group_split(crypto, .keep = FALSE) |> purrr::set_names(fitting_stats_df$crypto |> levels()) |> 
  purrr::map(format_fitting_stats_df)

fitting_stats_list |> create_tabset()

```
:::

It is clear for all 4 crypto assets, the Hyperbolic distribution has the better fitting statistics. This is true across the RSS, LogLik, AIC and BIC. The only occasion where Hyperbolic does not give the best result is for the BIC for Bitcoin. The BIC applies larger penalties for higher numbers of parameters, and as Hyperbolic has the most (at 4 parameters), it seems this is enough penalty to demote the Hyperbolic distribution. Despite this, it is quite clear Hyperbolic is preferable for every crypto asset analysed.

## Final Distributions

Our final chosen fitted distributions are:

-   BTC - Hyperbolic

-   ETH - Hyperbolic

-   XRP - Hyperbolic

-   DGE - Hyperbolic

Below we show the key percentiles for change in asset value over a one year time horizon. To make the results easier to interpret, we have converted the annualised log returns back into annualised simple returns.

```{r}
#| label: final distributions
#| echo: false  
 

sample_percentiles <- c(0.995, 0.975, 0.9, 0.5, 0.1, 0.025, 0.005)

sample_distributions <-
fitted_distributions |> 
  dplyr::filter(distribution == "hyperb") |> 
  dplyr::mutate(sample_percentiles = list(sample_percentiles)) |> 
  dplyr::mutate(
    sample_quantiles = purrr::map2(
      .x = distribution,
      .y = model,
      .f = function(x, y) {
        extract_fit_quantiles(
          x,
          y,
          percentiles = .env$sample_percentiles)
      })
  )

key_percentiles_df <-
sample_distributions |> 
  dplyr::select(crypto, sample_percentiles, sample_quantiles) |> 
  tidyr::unnest(cols = c("sample_percentiles", "sample_quantiles")) |> 
  dplyr::mutate(sample_quantiles = exp(sample_quantiles) - 1) |> 
  tidyr::pivot_wider(names_from = crypto, values_from = sample_quantiles) |> 
  dplyr::arrange(desc(sample_percentiles)) |> 
  dplyr::rename(Percentile = sample_percentiles) 

key_percentiles_gt <-
  key_percentiles_df |> 
  gt::gt() |> 
  gt::fmt_percent(columns = -"Percentile", decimals = 1, force_sign = TRUE) |> 
  gt::fmt_percent(columns = "Percentile", decimals = 1) |> 
  gt_theme()

key_percentiles_gt

```

It is quite clear that a 1-in-200 event would essentially wipe out all cryptocurrency value. In fact, even a 1-in-10 event would cause significant damage to asset values.

Even the median of these distributions is very negative, with a 1-in-2 event seeing Bitcoin values almost half over the year. The reason we observe this is a consequence of using log transformed returns to fit our distributions to. This was explained at the end of the ‘Data Transformation’ section.

### Specific Risk

Another consideration to make would be to have an overlay for this risk distribution. This would be with the aim of recognizing that we have fitted our distribution to a fairly short time period of of around 8-13 years, which could mean there are no extreme tail events within the dataset.

The risks to any single currency are not insignificant. <https://www.hedgewithcrypto.com/> notes that there have been between 1,700 and 2,500 cryptocurrencies to collapse into zero value. The largest being ‘Luna’ which had been a top 10 crypto by market capitalisation before collapsing to zero.

This information may be a reason to apply an overlay to our current distributions. We have not explored this any further here. This specific risk could potentially be diversified away through investment in many different crypto assets.

## Correlations

We consider the correlations of market movements between cryptocurrencies, as well as against other asset classes. By calculating Spearman’s rank correlation, we construct a correlation matrix, which is visualised below:

```{r}
#| label: correlations
#| echo: false  


# cross-asset correlation matrix
asset_levels <- c("BTC", "ETH", "XRP", "DGE", "FTSE100", "Gold")
asset_files <- paste0(data_folder, "/", asset_levels, " Historical Data.csv")


date_ceiling <- as.Date("2025-05-01")
date_floor <- as.Date("2012-01-01")

# =================================================
# ============== Clean asset data ================
# =================================================

asset_data <-
  asset_files |>
  map(\(x) read_csv(x, col_types = c(Date = "c", Open = "n", `Vol.` = "c"))) |>
  setNames(asset_levels) |>
  map(\(x) dplyr::select(x, Date, Open, Vol.)) |>
  bind_rows(.id = "asset") |>
  mutate(Date = as.Date(Date, tryFormats = c("%d/%m/%Y"))) |>
  janitor::clean_names() |>
  dplyr::mutate(asset = factor(asset, levels = asset_levels)) |>
  dplyr::filter(date <= date_ceiling,
                date >= date_floor) |>
  arrange(asset, date) |>
  mutate(simple_returns_raw = dplyr::if_else(asset == lag(asset, 12), (open / lag(open, 12)) - 1, NA)) |>
  mutate(simple_returns_neutral = 
           (1 + simple_returns_raw) / mean(1 + simple_returns_raw, na.rm = TRUE) - 1, 
         .by = asset) |>
  mutate(log_returns = log(1 + simple_returns_neutral)) |> 
  dplyr::filter(!is.na(log_returns)) |> 
  dplyr::select(asset, date, log_returns) |> 
  tidyr::pivot_wider(names_from = asset, values_from = log_returns) |> 
  dplyr::select(-date)

corr <- round(
  cor(asset_data, method = "spearman", use = "pairwise.complete.obs"), 
  2)

corr_df <- 
corr |> 
  as.tibble() |> 
  dplyr::mutate(asset_1 = rownames(corr)) |> 
  tidyr::pivot_longer(cols = -"asset_1", names_to = "asset_2", values_to = "correlation") |> 
  dplyr::mutate(
    dplyr::across(.cols = c("asset_1", "asset_2"),
                  .fns = function(x) factor(x, asset_levels)
    )
  ) |> 
    dplyr::filter(as.numeric(asset_1) <= as.numeric(asset_2)) |> 
  dplyr::mutate(correlation = dplyr::if_else(asset_1 == asset_2, NA, correlation))

corr_plot_gg <- 
corr_df |> 
  dplyr::filter(asset_1 != asset_2) |> 
  ggplot() +
  aes(x = asset_1, y = asset_2) +
    geom_point(data = corr_df |> dplyr::filter(asset_1 == asset_2), 
               alpha = 1,
               size = 20,
               color = "grey35") +
  geom_point_interactive(
    mapping = aes(fill = correlation,
                  tooltip = glue::glue("{asset_2} vs {asset_1}:",
                                       "<br>",
                                       "{scales::number(correlation, accuracy = 0.01, style_positive = 'plus')}")),
    size = 20,
    shape = 21,
    color = "grey35"
    ) +
    scale_fill_gradient2(
    low = "blue",
    mid = "white", 
    high = "red",
    midpoint = 0,
    limits = c(-1, 1),
    oob = scales::censor,  
    na.value = "grey35",
    name = "Correlation",
    labels = scales::number_format(accuracy = 0.1, style_positive = 'plus')
  ) +
  scale_x_discrete(position = "top") +
  scale_y_discrete(position = "left") +
  theme_classic() +
    guides(
    fill = guide_colourbar(position = "inside")
  ) +
  theme(
    axis.line = element_blank(),
    axis.ticks = element_blank(),
    axis.title = element_blank(),
    axis.text = element_text(size = 10),
    legend.position.inside = c(0.95, 0.15),
    legend.justification = c("right", "bottom")
  )


girafe(ggobj = corr_plot_gg,
       options = list(ggiraph::opts_tooltip(css = "color:black; padding: 6px; border-radius: 10px; ", use_fill = TRUE)))


```

### Crypto Intra-dependencies

By diversifying our portfolio we might remove specific risks (i.e. the risk of an individual crypto collapsing, like Luna). However systemic risk may still exist across all cryptocurrencies.

Cryptocurrencies are very highly correlated in their market movements. There is barely any systemic diversification benefit between the currencies. Given the very high correlation already in our historical data, we would suggest using the same risk driver to model all cryptocurrency risk in a portfolio would likely be sufficient.

### Crypto Inter-dependencies

How does cryptocurrency correlate with other asset classes? Bitcoin is sometimes described as “Digital Gold” \[https://www.db.com/what-next/digital-disruption/dossier-payments/i-could-potentially-see-bitcoin-to-become-the-21st-century-gold\]. Earlier we likened the two assets when trying to assign a risk premium for our crypto coins. Gold is a commodity. It is also negatively correlated to market trends in major asset classes such as equities. When the market takes a downturn, gold can often rise as investors see it to be a safe haven. As such gold can provide utility as a partial hedge within an investment portfolio.

Based on the correlations of cryptocurrency against Gold Futures and FTSE 100, we draw the following conclusions:

-   Gold is (weakly) negatively correlated to the UK Equity market, as shown by the correlation of -0.15. It could be considered as a good asset for diversification in an equity rich portfolio.

-   Cryptocurrency acts nothing like Gold. The correlation is close to zero for all cryptocurrencies tested.

-   Cryptocurrency is positively correlated to the FTSE 100, and not by a neglible amount. BTC scores a correlation on +0.50 against the FTSE 100. It appears to offer little in the way of hedging to the UK Equity market. If we take the price of gold to reflect (lack of) confidence in the market, it seems Bitcoin does not copy this reflection at all.

-   With material positive correlation to UK Equity market, and the extreme distributions we have fitted to cryptocurrency data, it is likely most insurance companies would observe an obliteration of crypto values within their biting scenario (if they held crypto).

## Conclusion

The following conclusions can be made:

-   Cryptocurrencies are incredibly volatile.

-   Applying our techniques lead to a distribution where only a 1-in-10 event would see almost all asset value wiped out. Even a median event will see asset values decline sharply.

-   Cryptocurrencies are highly correlated between each other in market movements. There is no doubt modeling all crypto assets with the same risk driver would be sufficient.

-   Crypto assets are positively correlated with the UK equity market. Given equity risk is often a significant risk for a major insurer, we expect many SCR biting scenarios to be at the negative end of the distribution for equities. Given this correlation, the crypto biting scenario will also likely be at the negative end of the distribution.

-   Given all these points above, we would expect the overall biting scenario for a major insurer to see cryptocurrency value completely decimated. The conclusion reached is that **almost all assets held as cryptocurrency will increase the SCR of a company by a similar amount**. This conclusion might lead an actuary to question how capital efficient it is to invest in crypto.

<br> <br>

The code used to generate the results in this article can be found at: <https://github.com/paulbeardactuarial/crypto_calibration>

<br>

::: {.sign-off}
This article was written by Paul Beard and published on 30th May 2025
:::
